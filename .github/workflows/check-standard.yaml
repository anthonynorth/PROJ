## copied from vapour 2020-06-20


on:
  push:
  pull_request:
    branches:
      - master

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}


    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
#          - {os: windows-latest, r: 'release'}
#          - {os: macOS-latest, r: 'release', binary: 'CRAN', args: '--install-args=\"--configure-args=--with-data-copy=yes --with-proj-data=/usr/local/share/proj\"', build_args: ""}
#          - {os: macOS-latest, r: 'devel',   binary: 'CRAN', args: '--install-args=\"--configure-args=--with-data-copy=yes --with-proj-data=/usr/local/share/proj\"', build_args: ""}
#          - {os: macOS-latest, r: 'release', binary: 'brew', args: '--install-args=\"--configure-args=--with-data-copy=yes --with-proj-data=/usr/local/share/proj\"', build_args: ""}
#          - {os: macOS-latest, r: 'devel',   binary: 'brew', args: '--install-args=\"--configure-args=--with-data-copy=yes --with-proj-data=/usr/local/share/proj\"', build_args: ""}
#          - {os: ubuntu-16.04, r: 'release', libsrc: 'xenial', rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}
#          - {os: ubuntu-18.04, r: 'release', libsrc: 'bionic', rspm: "https://packagemanager.rstudio.com/cran/__linux__/bionic/latest"}
          - {os: ubuntu-18.04, r: 'release', libsrc: 'proj6.3.2', rspm: "https://packagemanager.rstudio.com/cran/__linux__/bionic/latest"}


    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      CRAN: ${{ matrix.config.cran }}

    steps:
      - uses: actions/checkout@v1

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@master

      - name: MacOS CRAN-binary system dependencies
        if: runner.os == 'macOS' && matrix.config.binary == 'CRAN'
        run: |
           args=("proj")
           pat=$(echo ${args[@]}|tr " " "|")
           curl -sL  https://mac.r-project.org/libs-4/ |
             sed -n 's/.*href=\([^>]*x86_64.tar.gz\).*/\1/p' |
             grep -E "$pat" |
             xargs -I % sh -c 'curl https://mac.r-project.org/libs-4/% --output %; sudo tar fvxz % -C /usr/local --strip 2'

      - name: MacOS brew system dependencies
        if: runner.os == 'macOS' && matrix.config.binary == 'brew'
        run: |
           brew install proj

      - name: Linux PROJ build system dependencies
        if: runner.os == 'Linux' && matrix.config.libsrc == 'proj6.3.2'
        run: |
            sudo apt update
            sudo apt install -y cppcheck libsqlite3-dev ccache
            curl http://download.osgeo.org/proj/proj-6.3.2.tar.gz > proj-6.3.2.tar.gz
            tar xzf proj-6.3.2.tar.gz
            mv proj-6.3.2 ../proj
            cd ../proj
            CC="ccache gcc" CXX="ccache g++" CFLAGS=-O0 CXXFLAGS=-O0 ./configure --without-static --prefix=/tmp/projinstall
            echo "\nnproc:"
            echo $nproc
            echo "\n"
            make -j$(nproc)
            sudo make install -j$(nproc)
            sudo ldconfig
            cd ../PROJ

      - name: Linux system dependencies
        if: runner.os == 'Linux' && matrix.config.libsrc != 'proj6.3.2'
        env:
          RHUB_PLATFORM: linux-x86_64-ubuntu-gcc  ## required for sysreqs call below
        run: |
          Rscript -e "remotes::install_github('r-hub/sysreqs')"
          sysreqs=$(Rscript -e "cat(sysreqs::sysreq_commands('DESCRIPTION'))")
          sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable
          sudo apt update
          sudo -s eval "$sysreqs"

      - name: Query R package dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), "depends.Rds", version = 2)
        shell: Rscript {0}

      - name: Cache R package dependencies
        if: runner.os != 'Windows'
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ matrix.config.r }}-${{ hashFiles('depends.Rds') }}
          restore-keys: ${{ runner.os }}-r-${{ matrix.config.r }}-

      - name: Install R package dependencies
        run: |
          library(remotes)
          deps <- readRDS("depends.Rds")
          deps[["installed"]] <- vapply(deps[["package"]], remotes:::local_sha, character(1))
          update(deps)
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}

      - name: R CMD check windows
        if: runner.os == 'Windows'
        run: rcmdcheck::rcmdcheck(args = c("--no-manual"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: R CMD check (not Windows)
        if: runner.os != 'Windows'
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "${{ matrix.config.args }}"), error_on = "warning", check_dir = "check", build_args = "${{ matrix.config.build_args }}")
        shell: Rscript {0}

#      - name: Build
#        run: |
#          pkg_path <- pkgbuild::build(binary = TRUE)
#          dir.create("build")
#          file.copy(pkg_path, "build")
#        shell: Rscript {0}


      - name: Upload check results
        if: failure() #success()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
